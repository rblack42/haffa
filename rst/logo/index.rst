SVG Club Badge
##############

When I first joined the club, their logo was found only in an image file. The
original artist created the logo manually, then scanned it for club use. The
original is no longer available.

I decided that we needed a more permanent logo, one that could be scaled for a
variety of purposes. I also decided that we needed a badge we could use on
model airplanes, or club membership cards.

The solution was to take the image file and see if I could turn it into a pure
SVG file. This note details the process I went through to come up with the new
logo and badge.

Logo Composition
****************

The image file had only a few basic elements:

    * The US Flag (masked by a heart shape)
      * Background - red
      * Stripes - white
      * Star Field - blue
      * Stars - 50 laid out in a pattern - 5 vertical (6 sets), 4 vertical (5 sets)

    * The heart shape path

    * A Modeler launching an airplane

    * The Airplane itself

    * The name "HAFFA" styled in what looked like the Papyrus font

All of these basic components need to be constructed using SVG basic drawing
commands, then arranged on the drawing canvas to produce the final badge.

Most of the shapes we need to process will use the SVG Path command to draw a
line that defines the shape. The shapes usually end up creating a closed area
that we will fill with specific colors. Each shape has a rectangular "bounding
box" that surrounds the shape, and can be used to position that shape. The
basic layout and dimensions of all of these items needs to be defined before we
can set out to build the actual badge.

Processing the Image File
*************************

The starting point for this project is the simple image file. **inkscape** was
then used to transform this image into a basic SVG file. The first run using
this approach showed that manual tweaking would be needed in this effort!

Tracing the Image
=================

**inkscape** is a drawing program that uses SVG as its native file format. It
supports importing bitmapped image files into its work surface, and provides a
"trace bitmap" command that can produce a somewhat ugly SVG file the allows
further manipulation of the shapes found. This process is far from totally
automatic. Depending on the raw image, there may be shapes that merge together,
requiring manual intervention to produce a really workable result. Fortunately,
the club logo file was fairly easy to process.

The drawing path commands generated by **inkscape** were simplified and
smoothed out a bit to reduce the clutter from the tracing operation. This
simplification process kept the hand-drawn feel of the shapes. Hopefully they
will look good when scaled to large sizes.

After manual processing was finished, the output SVG file was edited to
separate out each basic shape. The only part of the**inkscape** output needed
was the SVG path commands used to draw each shape.

Position data was obtained by printing out the **inkscape** image on a full
sheet of paper, then measuring each location using a digital caliper. All of
this data was recorded in a single raw data file that will be used to generate
the final badge code.

Normalization Process
=====================

A simple Python SVG library, **svgelements**, was used to scale each defined
shape path to a "normalized" height of 1000 units. The scaled paths were then
stored in the shape data file.

The processing of the raw data was performed using a **Jupyter Notebook** where
Python commands can be executed and note recorded in a easy to follow format.
That processing is shown in the next section.

Design Plan
***********

In the sections that follow,  we will walk through building the code used to
generate a HAFFA Badge scaled to any desired size. The output of this program
will be  single SVG file suitable for generating just about any product you can
imagine; images for web publications, decals for models, banners, club
membership cards, patches for clothing.

Each section will be fairly short, and deal with one aspect of the design. Some
sections will show experiments conducted to generate test SVG files. The **Jupyter
Notebook** system will be used to show this processing. After the experiments are
know to work, the code from those notebooks will be added to the final Python
program shown in later sections.

Testing
=======

Since we are building a Python program, testing is a requirement. This testing
will ensure that each "unit' of code in the final program works as expected.
This testing will be run locally, and on **Travis-CI** which supports automated
testing og programs on most development platforms. All code generated will be
available on GitHub_ and the documentation will also be hosted there as well.



